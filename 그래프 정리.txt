일단 그래프에서 최단거리 알고리즘은 다익스트라, BFS, 플루이드와샬이 있다.

BFS는 노드와 노드 사이의 최단거리를 알 수 있지만

간선에 가중치가 있는 경우에는 정확한 최단 거리를 알 수 없다.

반면에 다익스트라 알고리즘은 간선에 가중치가 있는 경우 노드와 노드 사이의 최단거리를 알 수 있다.


만약 간선에 가중치가 없는 경우 BFS와 다익스트라를 혼합하여 사용가능한 듯 -->> 1261_1.cpp 코드 확인해봐


<다익스트라 정리> 

-->> 시간복잡도 O(V^2). 노드 만개이상 -->> 느림 (1초이상)
-->+ 코드 : #define INF 1e9 : 10억 설정 : 큰 수

-->+ vector 사용
-->+ 입력 : queue<<pair<int, int>> p[노드 수]; 
-->+ p[노드번호][queue 내부 index].(pairdata)

-->> 간단한 다익스트라 알고리즘은 O(V^2)의 시간 복잡도를 가진다. V는 노드의 개수를 의미한다.
-->> (총 노드의 개수 V 만큼 진행을 하고 매 단계마다 모든 노드를 탐색하여 최단 거리가 가장 짧은 노드를 찾아야 하기에 V만큼 시간이 든다.)

-->> 처음에 __각 노드에 대한 최단거리를 담는 1차원 리스트를 선언__ 한다.
-->> 이후에 단계마다 '방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택'하기 위해 __매 단계마다 1차원 리스트의 모든 원소를__ 확인(순차 탐색)한다

-->> 노드, 간선이 너무 많을 때는 개선된 다익스트라 알고리즘 사용할 것.


<개선된 다익스트라 정리>

-->> 시간복잡도 O(ElogV). (E:Edge)

-->> vector 사용
-->> priority queue 사용

-->> 대충 방식은 일반적인 다익스트라와 같음
-->> 명확한 차이점은 우선순위 큐 사용과 그로인한 BFS같은 코드 구조를 보임

-->> 그리고 큐에 저장된 간선 정보를 불러올 때
-->> 가중치 앞에 '-'연산자가 붙음
-->> 이게 음의 가중치라고 부르는 거 같은데
-->> 양수를 pq에 저장할 때도 -붙여서 저장함

